{
  parserClass="com.appian.intellij.k.parser.KParser"
  extends="com.appian.intellij.k.KAstWrapperPsiElement"

  psiClassPrefix="K"
  psiImplClassSuffix="Impl"
  psiPackage="com.appian.intellij.k.psi"
  psiImplPackage="com.appian.intellij.k.psi.impl"

  elementTypeHolderClass="com.appian.intellij.k.psi.KTypes"
  elementTypeClass="com.appian.intellij.k.psi.KElementType"
  tokenTypeClass="com.appian.intellij.k.psi.KTokenType"

  tokens=[

    // ascii chars
    bang='!'
    quote='"'
    hash='#'
    dollar='$'
    percent='%'
    ampersand='&'
    open_paren='('
    close_paren=')'
    asterisk='*'
    plus='+'
    comma=','
    dash='-'
    period='.'
    colon=':'
    semicolon=';'
    less_than='<'
    equals='='
    greater_than='>'
    question_mark='?'
    at='@'
    open_bracket='['
    close_bracket=']'
    caret='^'
    underscore='_'
    back_tick='`'
    open_brace='{'
    pipe='|'
    close_brace='}'
    tilde='~'

    primitive_verb="primitive verb"

    // adverbs
    adverb="adverb"

    // names
    user_identifier="variable"
    q_system_function="q function"
    q_sql_template="q-sql template"
    q_sql_from="from"

    // nouns
    number="number"
    char="char"
    string="string"
    symbol_vector="symbol vector"
    number_vector="number vector"

    // commands
    current_namespace="namespace"
    command="command"

    // special
    trace='\'
    signal="signal"
    mode="mode" // either k) or q)

    // control
    control="control statement"
    conditional="conditional evaluation"

    // punctuation
    newline="new line"
    comment='comment'
  ]
}

// E:E;e|e e:nve|te| t:n|v v:tA|V n:t[E]|(E)|{E}|N
root ::= top* separator_or_eof
private top ::= namespace_declaration
              | command_statement
              | mode_directive
              | expression_list
private expression_list ::= separator
                          | expression (separator+ expression)*
expression ::= q_sql | noun_or_verb noun_or_verb? adverb? expression?
q_sql ::= q_sql_template [expression] q_sql_from [expression]

private noun_or_verb ::= noun
                       | primitive_verb [colon]
                       | system_function
private noun ::= control_flow
            | args // there can be standalone args: e.g. (`.fn;[]) or select[1]
            | group_or_list
            | primitive_noun
            | assignment
            | user_id

private control_flow ::= control_statement | conditional_evaluation
control_statement ::= control args
conditional_evaluation ::= conditional args
args ::= open_bracket expression_list* close_bracket

private system_function ::= q_system_function | signal | trace | colon // ":" is return
group_or_list ::= open_paren expression_list* close_paren

lambda ::= open_brace [lambda_params] adverb? expression_list* close_brace // including adverb? here is a hack to make {[error]'error} work.
lambda_params ::= open_bracket [user_id (separator user_id)*] close_bracket

private separator ::= semicolon | newline
private separator_or_eof ::= separator | <<eof>>

// always defined at root
command_statement ::= command [expression]
namespace_declaration ::= current_namespace user_id
mode_directive ::= mode expression

// simple & compound assignment; local & global
assignment ::= user_id [args] (colon [colon] | verb colon | colon verb colon) expression

// all data are syntactically nouns
private primitive_noun ::= vector | atom | lambda
private vector ::= symbol_vector | number_vector | string
private atom ::= symbol | number | char

user_id ::= (user_identifier | q_system_function) {
  mixin="com.appian.intellij.k.psi.impl.KNamedElementImpl"
  implements="com.appian.intellij.k.psi.KNamedElement"
}
